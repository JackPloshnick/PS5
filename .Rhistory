setClass(Class="Simpson",  #Sets S4 class of door
representation = representation(
x_values = "numeric", # three slots as specified in problem set
y_values = "numeric",
estimate = "numeric"
),
prototype = prototype(
x_values = c(), #default values are empty
y_values = c(),
estimate = c()
)
)
setValidity("Simpson", function(object){
estimateLength = (length(object@estimate == 1))
valuesLength= (length(object@x_values)== length(object@y_values))
if(!estimateLength | !valuesLength){
return("Simpson not valid")
}
})
new("Simpson", x_values= x, y_values= y, estimate= 33.6)
setMethod("initialize", "Simpson", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
source('~/GitHub/PS5/Trapezoid.R')
setGeneric("integrateIt", #sets generic function in S4
function(object) {
standardGeneric("integrateIt")
} )
setGeneric("integrateIt", #sets generic function in S4
function(x,y,Starting_Ending_Values,type) {
standardGeneric("integrateIt")
} )
setMethod("integrateIt",
function(x,y,Starting_Ending_Values,type){
print("test")
})
setClass(Class="input",  #Sets S4 class of door
representation = representation(
x_values = "numeric", # three slots as specified in problem set
y_values = "numeric",
start_end_values = "numeric",
test= "character"
),
prototype = prototype(
x_values = c(), #default values are empty
y_values = c(),
start_end_values = c(),
test= c()
)
)
setValidity("", function(object){
valuesLength= (length(object@x_values)== length(object@y_values))
if( !valuesLength){
return("Simpson not valid")
}
})
setValidity("input", function(object){
valuesLength= (length(object@x_values)== length(object@y_values))
if(!valuesLength){
return("Simpson not valid")
}
})
new("input", x_values= x, y_values= y,start_end_values= StartToEnd, test= "Trap")
setMethod("initialize", "input", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
setMethod("integrateIt", "input",
function(x,y,Starting_Ending_Values,type){
print("test")
})
source('~/GitHub/PS5/Trapezoid.R')
setMethod("integrateIt", "input",
function(x,y,Starting_Ending_Values,type){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
tester
setMethod("integrateIt", "input",
function(x,y,Starting_Ending_Values,type){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
setGeneric("integrateIt", #sets generic function in S4
function(object) {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("initialize", "input", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(input@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
setMethod("integrateIt", "input",
function(object){
if(object@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
return(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
if(object@test== "Trap"){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
print(Trap)
}
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x= object@x_values, y= object@y_values, estimate=
trap(object@x_values, object@y_values, object@start_end_values))
print(Trap)
})
tester<- new("input", x_values= x, y_values= y, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setClass(Class="input",  #Sets S4 class of door
representation = representation(
x = "numeric", # three slots as specified in problem set
y = "numeric",
start_end_values = "numeric",
test= "character"
),
prototype = prototype(
x = c(), #default values are empty
y = c(),
start_end_values = c(),
test= c()
)
)
setClass(Class="input",  #Sets S4 class of door
representation = representation(
x = "numeric", # three slots as specified in problem set
y = "numeric",
start_end_values = "numeric",
test= "character"
),
prototype = prototype(
x = c(), #default values are empty
y = c(),
start_end_values = c(),
test= c()
)
)
setValidity("input", function(object){
valuesLength= (length(object@x)== length(object@y))
if(!valuesLength){
return("Simpson not valid")
}
})
x.test<- c(1,2,3,4,5)
y.test<- c(1,4,9,16,25)
tester<- new("input", x= x.test, y_values= y.test,start_end_values= StartToEnd, test= "Trap")
tester<- new("input", x= x.test, y= y.test,start_end_values= StartToEnd, test= "Trap")
setMethod("initialize", "input", function(.Object, ...) { #initilize method
value = callNextMethod()
validObject(value)
return(value)
})
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
})
tester<- new("input", x= x.test, y= y.test, start_end_values= StartToEnd, test= "Trap")
integrateIt(tester)
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Trap)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "S"){
Simpsons= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpsons)
}
})
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
if(test= "Simpson"){
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)}
else{
Simpson= new("Simpson", x_values= object@x, y_values= object@y, estimate=
simpsons(object@x, object@y, object@start_end_values))
print(Simpson)}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
}
})
setMethod("integrateIt", "input",
function(object){
Trap= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
print(Trap)
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
print(result)
})
source('~/GitHub/PS5/Trapezoid.R')
setGeneric("integrateIt", #sets generic function in S4
function(object= "input") {
standardGeneric("integrateIt")
} )
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
print(result)
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
})
setMethod("integrateIt", "input",
function(object){
if(test= "Trap"){
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
} )
setMethod("integrateIt", "input",
function(object){
if(test="Trap"){ #if cardoor and chosen door are the same, randomly choose between the two remaining doors
result= new("Trapezoid", x_values= object@x, y_values= object@y, estimate=
trap(object@x, object@y, object@start_end_values))
}
} )
source('~/GitHub/PS5/Trapezoid.R')
y<- c(1,2,3,4)
lambda<- 2
poisson.lik <- function(lambda,y){
n<- row(y)
logl <- sum(y)*log(lambda)-n*mu
return(-logl)
}
poisson.lik(lambda, y)
poisson.lik <- function(lambda,y){
n<- length(y)
logl <- sum(y)*log(lambda)-n*mu
return(-logl)
}
poisson.lik(lambda, y)
poisson.lik <- function(lambda,y){
n<- length(y)
logl <- sum(y)*log(lambda)-n*mu
return(-logl)
}
poisson.lik(lambda, y)
poisson.lik <- function(lambda,y){
n<- length(y)
logl <- sum(y)*log(lambda)-n*lambda
return(-logl)
}
poisson.lik(lambda, y)
y<- c(3,3,3,3)
lambda<- 3
poisson.lik <- function(lambda,y){
n<- length(y)
logl <- sum(y)*log(lambda)-n*lambda
return(-logl)
}
poisson.lik(lambda, y)
library(devtools)
library(roxygen2)
setwd("~/Applied Statistical Programming/poisson.lik")
package.skeleton()
current.code <- as.package("Poisson Liklihood")
document(current.code)
current.code <- as.package("Poisson Liklihood")
load_all(current.code)
document(current.code)
current.code <- as.package("Poisson Liklihood")
load_all(current.code)
current.code <- as.package("Poisson Liklihood")
load_all(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
poisson.lik(lambda,y)
document(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
setClass(Class="Poisson",  #Sets S4 class of door
representation = representation(
lambda = "numeric", # three slots as specified in problem set
y = "numeric",
),
prototype = prototype(
x_values = c(), #default values are empty
y_values = c()
)
)
setClass(Class="Poisson_class",  #Sets S4 class of door
representation = representation(
l = "numeric"
),
prototype = prototype(
l= c()
)
)
setMethod("initialize", "Poisson_class",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
current.code <- as.package("Poisson")
load_all(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
current.code <- as.package("Poisson")
load_all(current.code)
document(current.code)
new("Poisson_class")
current.code <- as.package("integrateIt")
setwd("~/GitHub/PS5")
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
check(current.code)
